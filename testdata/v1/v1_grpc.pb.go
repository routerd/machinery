//
//routerd
//Copyright (C) 2020  The routerd Authors
//
//This program is free software: you can redistribute it and/or modify
//it under the terms of the GNU Affero General Public License as published by
//the Free Software Foundation, either version 3 of the License, or
//(at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but WITHOUT ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//GNU Affero General Public License for more details.
//
//You should have received a copy of the GNU Affero General Public License
//along with this program.  If not, see <http://www.gnu.org/licenses/>.
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"

	v1 "routerd.net/machinery/api/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TestObjectServiceClient is the client API for TestObjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestObjectServiceClient interface {
	Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*TestObject, error)
	List(ctx context.Context, in *v1.ListRequest, opts ...grpc.CallOption) (*TestObjectList, error)
	Watch(ctx context.Context, in *v1.WatchRequest, opts ...grpc.CallOption) (TestObjectService_WatchClient, error)
	Create(ctx context.Context, in *TestObject, opts ...grpc.CallOption) (*TestObject, error)
	Update(ctx context.Context, in *TestObject, opts ...grpc.CallOption) (*TestObject, error)
	Delete(ctx context.Context, in *TestObject, opts ...grpc.CallOption) (*TestObject, error)
	DeleteAllOf(ctx context.Context, in *v1.DeleteAllOfRequest, opts ...grpc.CallOption) (*v1.Status, error)
}

type testObjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestObjectServiceClient(cc grpc.ClientConnInterface) TestObjectServiceClient {
	return &testObjectServiceClient{cc}
}

func (c *testObjectServiceClient) Get(ctx context.Context, in *v1.GetRequest, opts ...grpc.CallOption) (*TestObject, error) {
	out := new(TestObject)
	err := c.cc.Invoke(ctx, "/machinery.testdata.v1.TestObjectService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testObjectServiceClient) List(ctx context.Context, in *v1.ListRequest, opts ...grpc.CallOption) (*TestObjectList, error) {
	out := new(TestObjectList)
	err := c.cc.Invoke(ctx, "/machinery.testdata.v1.TestObjectService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testObjectServiceClient) Watch(ctx context.Context, in *v1.WatchRequest, opts ...grpc.CallOption) (TestObjectService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestObjectService_serviceDesc.Streams[0], "/machinery.testdata.v1.TestObjectService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &testObjectServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestObjectService_WatchClient interface {
	Recv() (*v1.ResourceEvent, error)
	grpc.ClientStream
}

type testObjectServiceWatchClient struct {
	grpc.ClientStream
}

func (x *testObjectServiceWatchClient) Recv() (*v1.ResourceEvent, error) {
	m := new(v1.ResourceEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testObjectServiceClient) Create(ctx context.Context, in *TestObject, opts ...grpc.CallOption) (*TestObject, error) {
	out := new(TestObject)
	err := c.cc.Invoke(ctx, "/machinery.testdata.v1.TestObjectService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testObjectServiceClient) Update(ctx context.Context, in *TestObject, opts ...grpc.CallOption) (*TestObject, error) {
	out := new(TestObject)
	err := c.cc.Invoke(ctx, "/machinery.testdata.v1.TestObjectService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testObjectServiceClient) Delete(ctx context.Context, in *TestObject, opts ...grpc.CallOption) (*TestObject, error) {
	out := new(TestObject)
	err := c.cc.Invoke(ctx, "/machinery.testdata.v1.TestObjectService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testObjectServiceClient) DeleteAllOf(ctx context.Context, in *v1.DeleteAllOfRequest, opts ...grpc.CallOption) (*v1.Status, error) {
	out := new(v1.Status)
	err := c.cc.Invoke(ctx, "/machinery.testdata.v1.TestObjectService/DeleteAllOf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestObjectServiceServer is the server API for TestObjectService service.
// All implementations must embed UnimplementedTestObjectServiceServer
// for forward compatibility
type TestObjectServiceServer interface {
	Get(context.Context, *v1.GetRequest) (*TestObject, error)
	List(context.Context, *v1.ListRequest) (*TestObjectList, error)
	Watch(*v1.WatchRequest, TestObjectService_WatchServer) error
	Create(context.Context, *TestObject) (*TestObject, error)
	Update(context.Context, *TestObject) (*TestObject, error)
	Delete(context.Context, *TestObject) (*TestObject, error)
	DeleteAllOf(context.Context, *v1.DeleteAllOfRequest) (*v1.Status, error)
	mustEmbedUnimplementedTestObjectServiceServer()
}

// UnimplementedTestObjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestObjectServiceServer struct {
}

func (UnimplementedTestObjectServiceServer) Get(context.Context, *v1.GetRequest) (*TestObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTestObjectServiceServer) List(context.Context, *v1.ListRequest) (*TestObjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTestObjectServiceServer) Watch(*v1.WatchRequest, TestObjectService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedTestObjectServiceServer) Create(context.Context, *TestObject) (*TestObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTestObjectServiceServer) Update(context.Context, *TestObject) (*TestObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTestObjectServiceServer) Delete(context.Context, *TestObject) (*TestObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTestObjectServiceServer) DeleteAllOf(context.Context, *v1.DeleteAllOfRequest) (*v1.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllOf not implemented")
}
func (UnimplementedTestObjectServiceServer) mustEmbedUnimplementedTestObjectServiceServer() {}

// UnsafeTestObjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestObjectServiceServer will
// result in compilation errors.
type UnsafeTestObjectServiceServer interface {
	mustEmbedUnimplementedTestObjectServiceServer()
}

func RegisterTestObjectServiceServer(s grpc.ServiceRegistrar, srv TestObjectServiceServer) {
	s.RegisterService(&_TestObjectService_serviceDesc, srv)
}

func _TestObjectService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestObjectServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machinery.testdata.v1.TestObjectService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestObjectServiceServer).Get(ctx, req.(*v1.GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestObjectService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestObjectServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machinery.testdata.v1.TestObjectService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestObjectServiceServer).List(ctx, req.(*v1.ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestObjectService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestObjectServiceServer).Watch(m, &testObjectServiceWatchServer{stream})
}

type TestObjectService_WatchServer interface {
	Send(*v1.ResourceEvent) error
	grpc.ServerStream
}

type testObjectServiceWatchServer struct {
	grpc.ServerStream
}

func (x *testObjectServiceWatchServer) Send(m *v1.ResourceEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _TestObjectService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestObjectServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machinery.testdata.v1.TestObjectService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestObjectServiceServer).Create(ctx, req.(*TestObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestObjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestObjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machinery.testdata.v1.TestObjectService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestObjectServiceServer).Update(ctx, req.(*TestObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestObjectService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestObjectServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machinery.testdata.v1.TestObjectService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestObjectServiceServer).Delete(ctx, req.(*TestObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestObjectService_DeleteAllOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteAllOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestObjectServiceServer).DeleteAllOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machinery.testdata.v1.TestObjectService/DeleteAllOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestObjectServiceServer).DeleteAllOf(ctx, req.(*v1.DeleteAllOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestObjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "machinery.testdata.v1.TestObjectService",
	HandlerType: (*TestObjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TestObjectService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TestObjectService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TestObjectService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TestObjectService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TestObjectService_Delete_Handler,
		},
		{
			MethodName: "DeleteAllOf",
			Handler:    _TestObjectService_DeleteAllOf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _TestObjectService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1.proto",
}
